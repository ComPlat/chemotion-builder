# GLOBALs that should be passed to this file
ARG VERSION=UNSET
ARG BUILD_TAG_CHEMOTION=UNSET

# Derived values
ARG BASE=chemotion-build/base:${VERSION}
ARG CHEMOTION_RELEASE=${VERSION}

# Private variables, not passed in from outside, but helpful for this file
ARG RUBY_VERSION=latest:2.7
ARG NODE_VERSION=latest:14
# ARG BUNDLER_VERSION=1.17.3
ARG BUNDLER_VERSION=2.2.33
ARG ASDF_VERSION=v0.10.2
ARG PANDOC_VERSION=2.10.1


########################################################################################################################
# Add ASDF, Ruby, Node, bundler and yarn
########################################################################################################################
# hadolint ignore=DL3006
FROM ${BASE} as eln-ruby-node
RUN apt-get install -y --no-install-recommends --autoremove --fix-missing git ca-certificates curl
SHELL ["/bin/bash", "-e", "-o", "pipefail", "-c", "--"]

RUN apt-get install -y --no-install-recommends --autoremove --fix-missing build-essential \
    `# for asdf: ruby` \
    zlib1g-dev libreadline-dev patchelf

ARG ASDF_VERSION
ARG RUBY_VERSION
ARG NODE_VERSION
ARG BUNDLER_VERSION

# make asdf and its shims available everywhere (set ASDF_DIR to where you cloned asdf)
ENV ASDF_DIR=/asdf                                      \
    ASDF_DATA_DIR=/asdf                                 \
    ASDF_DEFAULT_TOOL_VERSIONS_FILENAME=.tool-versions  \
    GEM_HOME=/cache/gems
ENV PATH="${GEM_HOME}/bin:${GEM_HOME}/gems/bin:${ASDF_DIR}/shims:${ASDF_DIR}/bin:${PATH}"

# Ways to get OpenSSL1.1 (required for Ruby 2.7) going on newer Ubuntus:
# - add the .deb packages from a previous Ubuntu version. Needs to be done in all stages.
# - adsf will install OpenSSL if missing, then patchelf can be used to adjust rpaths
# - use asdf's OpenSSL installation and copy libcrypto.so.1.1 to the system directory

# ADD https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/24138247/+files/libssl-dev_1.1.1l-1ubuntu1.6_amd64.deb /tmp
# ADD https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/24138247/+files/libssl1.1_1.1.1l-1ubuntu1.6_amd64.deb  /tmp
# RUN dpkg -i /tmp/*.deb

# ASDF
RUN git clone https://github.com/asdf-vm/asdf.git /asdf --branch "${ASDF_VERSION}"

# NodeJS
RUN MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)" && export MAKEFLAGS && \
    asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git && \
    asdf install nodejs "${NODE_VERSION}" && \
    asdf global nodejs "${NODE_VERSION}" && \
    npm install -g yarn

# Ruby
RUN MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)" && export MAKEFLAGS && \
    asdf plugin add ruby https://github.com/asdf-vm/asdf-ruby.git && \
    asdf install ruby "${RUBY_VERSION}" && \
    asdf global ruby "${RUBY_VERSION}"  && \
    gem install bundler -v "${BUNDLER_VERSION}"

# fix the openSSL thing explained above.
RUN SSL_PATH="$(asdf where ruby)" && \
    ln -s "${SSL_PATH}/openssl/lib/libcrypto.so.1.1" /lib/x86_64-linux-gnu/

# move things to /builder to export them to next layer
RUN mkdir -p /builder/{root,usr/lib/x86_64-linux-gnu} && \
    mv /root/.tool-versions /builder/root/ && \
    mv /lib/x86_64-linux-gnu/libcrypto.so.1.1 /builder/usr/lib/x86_64-linux-gnu/ && \
    mv /cache /asdf /builder/

########################################################################################################################
# Runtime: get ELN, configure, install gems, install node packages
########################################################################################################################
# hadolint ignore=DL3006
FROM ${BASE} as eln-runtimes
RUN apt-get install -y --no-install-recommends --autoremove --fix-missing git ca-certificates curl
SHELL ["/bin/bash", "-e", "-o", "pipefail", "-c", "--"]

# install requirements for ELN
RUN apt-get install -y --no-install-recommends --autoremove --fix-missing build-essential \
    `# for the gems` \
    cmake libpq-dev swig \
    libboost-serialization-dev \
    libboost-iostreams-dev \
    libboost-system-dev \
    libeigen3-dev \
    libmagickcore-dev \
    python3-dev libsqlite3-dev
# shared-mime-info `# for the MIMEmagic gem`

# overlay /builder to /
COPY --from=eln-ruby-node /builder /
# RUN tar cH posix --directory=/builder . | tar xh --one-top-level=/ && rm -rf /builder

ARG CHEMOTION_RELEASE
ARG VERSION
ARG BUILD_TAG_CHEMOTION
ARG PANDOC_VERSION

# make asdf and its shims available everywhere (set ASDF_DIR to where you cloned asdf)
ENV ASDF_DIR=/asdf      \
    ASDF_DATA_DIR=/asdf \
    ASDF_DEFAULT_TOOL_VERSIONS_FILENAME=.tool-versions \
    GEM_HOME=/cache/gems
ENV PATH="${GEM_HOME}/bin:${GEM_HOME}/gems/bin:${ASDF_DIR}/shims:${ASDF_DIR}/bin:${PATH}"

# setup environment

# note: NODE_MODULES_PATH is a hack someone implemented for the docker dev setup.
#       see `config/initializers/assets.rb` for details.
ENV BUNDLE_PATH=/cache/bundle                           \
    BUNDLE_USER_HOME=/cache/bundle                      \
    BUNDLE_CACHE_ALL=1                                  \
    RAILS_ENV=production                                \
    RAKE_ENV=production                                 \
    NODE_ENV=production                                 \
    NODE_PATH=/cache/node_modules/                      \
    NODE_MODULES_PATH=/cache/node_modules/              \
    NODE_OPTIONS=--max_old_space_size=4096              \
    THOR_SILENCE_DEPRECATION=1

ADD https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 /bin/yq
RUN chmod +x /bin/yq

# checkout Chemotion
RUN test -n "${BUILD_TAG_CHEMOTION}" && echo "CHECKOUT: ${BUILD_TAG_CHEMOTION}" && \
    git init --initial-branch=main /chemotion/app && \
    git -C /chemotion/app remote add origin https://github.com/ComPlat/chemotion_ELN && \
    git -C /chemotion/app fetch --tags --depth 1 origin "${BUILD_TAG_CHEMOTION}" && \
    git -C /chemotion/app reset --hard FETCH_HEAD && \
    git -C /chemotion/app describe --abbrev=0 --tags || echo ${BUILD_TAG_CHEMOTION} && \
    cat /chemotion/app/VERSION

WORKDIR /chemotion/app

# Create release file
RUN echo "CHEMOTION_REF=$(git rev-parse --short HEAD || echo unknown)" >> /chemotion/app/.version      && \
    echo "CHEMOTION_TAG=$(git describe --abbrev=0 --tags || echo untagged)" >> /chemotion/app/.version && \
    echo "RELEASE=${CHEMOTION_RELEASE}" >> /chemotion/app/.version                                     && \
    echo "VERSION=${VERSION}" >> /chemotion/app/.version                                               && \
    cat /chemotion/app/.version

# Clean up the configs
RUN find ./config -type f -name '*.yml.example' -print | while read -r f; do \
    echo "$f to ${f%.example}"; \
    yq --input-format yaml -ojson < "$f" | \
    yq -oyaml -P 'with(select(.production != null); . = {"production":.production}) | with(select(.production == null); {})' \
    > "${f%.example}"; \
    done

# Clean up unused files
RUN rm -f config/deploy.rb \
    config/environments/development.rb \
    config/environments/test.rb \
    ./**/*.example \
    ./**/*github* \
    ./**/*gitlab* \
    ./**/*travis* \
    ./**/*.bak    \
    ./**/*git* || true

# deal with the weird favicon situation
RUN if [ -f /chemotion/app/public/favicon.ico ] && [ ! -e /chemotion/app/public/favicon.ico.example ]; then \
    cp /chemotion/app/public/favicon.ico /chemotion/app/public/favicon.ico.example; \
    fi

# misc. tweaks: configure yarn
RUN echo -e "--modules-folder ${NODE_PATH}\n--ignore-engines" > /chemotion/app/.yarnrc && \
    if [[ ! -f /chemotion/app/config/klasses.json ]]; then echo '[]' > /chemotion/app/config/klasses.json; fi

# Add application additives as-is. We do this at the end to avoid alterations from previous actions.
COPY ./additives/chemotion/ /chemotion/app

# Create persistent volume directories:
# - move [app]/uploads to /chemotion/data
# - move [app]/public/images to /data
RUN mkdir -p /chemotion/data && \
    mv /chemotion/app/uploads /chemotion/data/ || mkdir -p /chemotion/data/uploads && \
    ln -s /chemotion/data/uploads/ /chemotion/app/uploads && \
    mkdir -p /chemotion/data/public/ && \
    mv /chemotion/app/public/images/ /chemotion/data/public/ || mkdir -p /chemotion/data/public/images && \
    ln -s /chemotion/data/public/images/ /chemotion/app/public/images && \
    cp /chemotion/app/.version /chemotion/data/.version

# add gems from cache
# ADD ./cache/bundle.tar.gz           /cache/
# ADD ./cache/gems.tar.gz             /cache/
# ADD ./cache/node_modules.tar.gz     /cache/

# cache stuff
# ENV BUNDLE_CACHE_PATH=/cache/bundle-cache
# ADD cache.tar.gz /

# yarn install again to make sure we are good
RUN MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)" && export MAKEFLAGS && \
    yarn install --modules-folder ${NODE_PATH} --ignore-engines 2>&1 | grep -v ^warning

RUN yarn add --modules-folder ${NODE_PATH} --ignore-engines loader-utils@2.0.4 execa
ARG BUNDLER_VERSION
RUN sed -i '/^BUNDLED WITH$/!b;n;c   '${BUNDLER_VERSION} Gemfile.lock
# COPY Gemfile /chemotion/app/Gemfile

# we need to patch/add a few gems...
RUN git clone https://github.com/CamAnNguyen/rdkit_chem.git /tmp/rdkit_chem && \
    sed -i 's%-DCMAKE_BUILD_TYPE=Release%-DCMAKE_BUILD_TYPE=Release -DRDK_BUILD_CPP_TESTS=OFF%g' /tmp/rdkit_chem/ext/rdkit_chem/extconf.rb && \
    git -C /tmp/rdkit_chem add . && git -C /tmp/rdkit_chem -c user.name='Don Draper' -c user.email='don.draper@sterling-cooper.com' commit -m '...' && \
    LATEST_REF=$(git -C /tmp/rdkit_chem show-ref --head -s | head -n1) && \
    sed -i 's%https://github.com/CamAnNguyen/rdkit_chem%/tmp/rdkit_chem/%g' /chemotion/app/Gemfile && \
    sed -i '/rdkit_chem/ s/$/, ref: "'"${LATEST_REF}"'"/'                   /chemotion/app/Gemfile && \
    sed -i 's%ComPlat/openbabel-gem.git%ptrxyz/openbabel-gem.git%g'         /chemotion/app/Gemfile && \
    sed -i '/openbabel/s%hot-fix-svg%ptrxyz-ctime-fix%g'                    /chemotion/app/Gemfile && \
    echo "gem 'tzinfo-data'"                 >> /chemotion/app/Gemfile                             && \
    echo "gem 'activerecord-nulldb-adapter'" >> /chemotion/app/Gemfile

# compile the gems
RUN MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)" && export MAKEFLAGS && \
    bundle config --global silence_root_warning 1 && \
    bundle install --jobs="$(getconf _NPROCESSORS_ONLN)" --retry=3 --standalone production --without development test

# cache stuff
# RUN bundle package --all

# Add other additives
COPY ./additives/various/fontfix.conf /etc/fonts/conf.d/99-chemotion-fontfix.conf
COPY ./additives/various/policy.xml   /etc/ImageMagick-6/policy.xml
COPY ./additives/embed/               /embed/

# more misc tweaks
RUN curl -L -o /tmp/pandoc.deb "https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-1-amd64.deb" && \
    ln -s /embed/bin/chemotion /bin/chemotion && \
    cp /chemotion/app/.version /.version && \
    chmod +x /embed/bin/*

# move things to /builder to export them to next layer
RUN mkdir -p /builder/ && mv /asdf /cache /chemotion /embed /builder/
RUN mkdir -p /builder/{shared,bin,etc/fonts/conf.d,etc/ImageMagick-6/,lib/x86_64-linux-gnu,tmp,root} && \
    mv /.version /builder/ && \
    mv /bin/chemotion /builder/bin/ && \
    mv /etc/fonts/conf.d/99-chemotion-fontfix.conf /builder/etc/fonts/conf.d/ && \
    mv /etc/ImageMagick-6/policy.xml /builder/etc/ImageMagick-6/ && \
    mv /lib/x86_64-linux-gnu/libcrypto.so.1.1 /builder/lib/x86_64-linux-gnu/ && \
    mv /bin/yq /builder/bin/ && \
    mv /tmp/pandoc.deb /builder/tmp/ && \
    mv /root/.tool-versions /builder/root/

########################################################################################################################
# Install ELN
########################################################################################################################
# hadolint ignore=DL3006
FROM "${BASE}" as pre-eln
RUN apt-get install -y --no-install-recommends --autoremove --fix-missing git ca-certificates curl
SHELL ["/bin/bash", "-e", "-o", "pipefail", "-c", "--"]

# runtime requirements for Chemotion
RUN apt-get install -y --no-install-recommends --autoremove --fix-missing \
    `# for chemotion` \
    libboost-serialization1.74.0 \
    libboost-iostreams1.74.0 \
    postgresql-client `# also adds pg_isready` \
    inkscape `# this installs python3` \
    imagemagick \
    librsvg2-bin `# for thumbnail generation of reasearch plans` \
    locales \
    `# utilitites` \
    vim iproute2 sudo make

# overlay /builder to /
COPY --from=eln-runtimes /builder /builder
RUN tar cH posix --directory=/builder . | tar xh --one-top-level=/ && rm -rf /builder

# CONFIG_PIDFILE: the ELN uses this file to communicate that it is alive
# and the bgworker can start working. (Needs to be on a shared volume.)
ENV ASDF_DIR=/asdf                                      \
    ASDF_DATA_DIR=/asdf                                 \
    ASDF_DEFAULT_TOOL_VERSIONS_FILENAME=.tool-versions  \
    BUNDLE_PATH=/cache/bundle                           \
    BUNDLE_USER_HOME=/cache/bundle                      \
    BUNDLE_CACHE_ALL=1                                  \
    GEM_HOME=/cache/gems                                \
    RAILS_ENV=production                                \
    RAKE_ENV=production                                 \
    NODE_ENV=production                                 \
    NODE_PATH=/cache/node_modules/                      \
    NODE_MODULES_PATH=/cache/node_modules/              \
    NODE_OPTIONS=--max_old_space_size=4096              \
    TERM=xterm-256color                                 \
    THOR_SILENCE_DEPRECATION=1                          \
    RAILS_LOG_TO_STDOUT=1                               \
    PASSENGER_DOWNLOAD_NATIVE_SUPPORT_BINARY=0          \
    CONFIG_PIDFILE=/chemotion/app/tmp/eln.pid
ENV PATH="${GEM_HOME}/bin:${GEM_HOME}/gems/bin:${ASDF_DIR}/shims:${ASDF_DIR}/bin:${PATH}"

# cache stuff
# ENV BUNDLE_CACHE_PATH=/cache/bundle-cache

WORKDIR /chemotion/app

# (re)install node packages from cache
RUN MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)" && export MAKEFLAGS && \
    ln -s ${NODE_PATH} /chemotion/app/node_modules && \
    yarn install --modules-folder ${NODE_PATH} --ignore-engines 2>&1 | grep -v ^warning && \
    yarn cache clean 2>&1 | grep -v ^warning

# (re)install gems from cache
RUN MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)" && export MAKEFLAGS && \
    bundle config --global silence_root_warning 1 && \
    bundle install --jobs="$(getconf _NPROCESSORS_ONLN)" --retry=3

# Pierre's fix for the style sheet issue
RUN cp -f -l /cache/node_modules/ag-grid-community/dist/styles/ag-grid.css /chemotion/app/app/assets/stylesheets/.  && \
    cp -f -l /cache/node_modules/ag-grid-community/dist/styles/ag-theme-alpine.css /chemotion/app/app/assets/stylesheets/.  && \
    cp -f -l /cache/node_modules/antd/dist/antd.css /chemotion/app/app/assets/stylesheets/.  && \
    cp -f -l /cache/node_modules/react-datepicker/dist/react-datepicker.css /chemotion/app/app/assets/stylesheets/.  && \
    cp -f -l /cache/node_modules/react-select/dist/react-select.css /chemotion/app/app/assets/stylesheets/.  && \
    cp -f -l /cache/node_modules/react-treeview/react-treeview.css /chemotion/app/app/assets/stylesheets/.  && \
    cp -f -l /cache/node_modules/react-vis/dist/style.css /chemotion/app/app/assets/stylesheets/react-vis-styles.css  && \
    cp -f -l /cache/node_modules/react-virtualized/styles.css /chemotion/app/app/assets/stylesheets/react-virtualized-styles.css  && \
    cp -f -l /cache/node_modules/react-virtualized-select/styles.css /chemotion/app/app/assets/stylesheets/react-virtualized-select-styles.css

# precompile
RUN export SECRET_KEY_BASE="build"                                                                          && \
    KETCHER_PATH=$(bundle info --path ketcherails)                                                          && \
    UIFILE_PATH="${KETCHER_PATH}/app/assets/javascripts/ketcherails/ui/ui.js.erb"                           && \
    rm /chemotion/app/config/scifinder_n.yml && \
    cp "${UIFILE_PATH}" /tmp/ui.js.bak                                                                      && \
    sed -i 's/Ketcherails::TemplateCategory.with_approved_templates.pluck(:id)/[]/g' "${UIFILE_PATH}"       && \
    bundle exec rake DISABLE_DATABASE_ENVIRONMENT_CHECK=1 DATABASE_URL=nulldb://user:pass@127.0.0.1/dbname webpacker:compile 2>&1 | grep -v ^warning  && \
    bundle exec rake DISABLE_DATABASE_ENVIRONMENT_CHECK=1 DATABASE_URL=nulldb://user:pass@127.0.0.1/dbname assets:precompile 2>&1 | grep -v ^warning  && \
    mv /tmp/ui.js.bak "${UIFILE_PATH}"

# move things to /builder to export them to next layer
RUN mkdir -p /builder/ && mv /asdf /cache /chemotion /embed /builder/
RUN mkdir -p /builder/{tmp,root,shared,usr/bin,usr/lib/x86_64-linux-gnu,etc/fonts/conf.d} && \
    mv /.version /builder/ && \
    mv /bin/chemotion /builder/usr/bin/ && \
    mv /bin/yq /builder/usr/bin/ && \
    mv /etc/fonts/conf.d/99-chemotion-fontfix.conf /builder/etc/fonts/conf.d/ && \
    mv /lib/x86_64-linux-gnu/libcrypto.so.1.1 /builder/usr/lib/x86_64-linux-gnu/ && \
    mv /tmp/pandoc.deb /builder/tmp/ && \
    mv /root/.tool-versions /builder/root/

########################################################################################################################
# ELN: Simply copy things over (configured, precompiled ELN, packages, gems) and install dependencies
########################################################################################################################
# hadolint ignore=DL3006
FROM "${BASE}" as eln
RUN apt-get install -y --no-install-recommends --autoremove --fix-missing git ca-certificates curl
SHELL ["/bin/bash", "-e", "-o", "pipefail", "-c", "--"]

# runtime requirements for Chemotion
RUN apt-get install -y --no-install-recommends --autoremove --fix-missing \
    `# for chemotion` \
    libboost-serialization1.74.0 \
    libboost-iostreams1.74.0 \
    postgresql-client `# also adds pg_isready` \
    inkscape `# this installs python3` \
    imagemagick \
    librsvg2-bin `# for thumbnail generation of reasearch plans` \
    locales \
    `# utilitites` \
    vim iproute2 sudo make

# overlay /builder to /
COPY --from=pre-eln /builder /

RUN dpkg -i /tmp/pandoc.deb && rm /tmp/pandoc.deb

# CONFIG_PIDFILE: the ELN uses this file to communicate that it is alive
# and the bgworker can start working. (Needs to be on a shared volume.)
ENV ASDF_DIR=/asdf                                      \
    ASDF_DATA_DIR=/asdf                                 \
    ASDF_DEFAULT_TOOL_VERSIONS_FILENAME=.tool-versions  \
    BUNDLE_PATH=/cache/bundle                           \
    BUNDLE_USER_HOME=/cache/bundle                      \
    BUNDLE_CACHE_ALL=1                                  \
    GEM_HOME=/cache/gems                                \
    RAILS_ENV=production                                \
    RAKE_ENV=production                                 \
    NODE_ENV=production                                 \
    NODE_PATH=/cache/node_modules/                      \
    NODE_MODULES_PATH=/cache/node_modules/              \
    NODE_OPTIONS=--max_old_space_size=4096              \
    TERM=xterm-256color                                 \
    THOR_SILENCE_DEPRECATION=1                          \
    RAILS_LOG_TO_STDOUT=1                               \
    PASSENGER_DOWNLOAD_NATIVE_SUPPORT_BINARY=0          \
    CONFIG_PIDFILE=/chemotion/app/tmp/eln.pid
ENV PATH="${GEM_HOME}/bin:${GEM_HOME}/gems/bin:${ASDF_DIR}/shims:${ASDF_DIR}/bin:${PATH}"

# cleanup
RUN rm -rf /tmp/* /var/tmp/*

# FROM ${BASE} as final
# COPY --from=eln / /
# SHELL ["/bin/bash", "-e", "-o", "pipefail", "-c", "--"]

# # CONFIG_PIDFILE: the ELN uses this file to communicate that it is alive
# # and the bgworker can start working. (Needs to be on a shared volume.)
# ENV ASDF_DIR=/asdf                                      \
#     ASDF_DATA_DIR=/asdf                                 \
#     ASDF_DEFAULT_TOOL_VERSIONS_FILENAME=.tool-versions  \
#     BUNDLE_PATH=/cache/bundle                           \
#     BUNDLE_USER_HOME=/cache/bundle                      \
#     BUNDLE_CACHE_ALL=1                                  \
#     GEM_HOME=/cache/gems                                \
#     RAILS_ENV=production                                \
#     RAKE_ENV=production                                 \
#     NODE_ENV=production                                 \
#     NODE_PATH=/cache/node_modules/                      \
#     NODE_MODULES_PATH=/cache/node_modules/              \
#     NODE_OPTIONS=--max_old_space_size=4096              \
#     TERM=xterm-256color                                 \
#     THOR_SILENCE_DEPRECATION=1                          \
#     RAILS_LOG_TO_STDOUT=1                               \
#     PASSENGER_DOWNLOAD_NATIVE_SUPPORT_BINARY=0          \
#     CONFIG_PIDFILE=/chemotion/app/tmp/eln.pid
# ENV PATH="${GEM_HOME}/bin:${GEM_HOME}/gems/bin:${ASDF_DIR}/shims:${ASDF_DIR}/bin:${PATH}"

# Stage 5: finalize the image
FROM eln as app
ARG VERSION

EXPOSE 4000

WORKDIR /chemotion/app
CMD ["/embed/run.sh"]

HEALTHCHECK --interval=30s --timeout=10s --start-period=120s --retries=3 \
    CMD /embed/health.sh || exit 1

VOLUME [ "/chemotion/app", "/chemotion/data" ]

LABEL \
    "org.opencontainers.image.authors"="Chemotion Team" \
    "org.opencontainers.image.title"="Chemotion ELN" \
    "org.opencontainers.image.description"="Image for Chemotion ELN" \
    "org.opencontainers.image.version"="${VERSION}" \
    "chemotion.internal.service.id"="eln"
